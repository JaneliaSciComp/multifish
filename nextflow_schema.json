{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://raw.githubusercontent.com/JaneliaSciComp/multifish/master/nextflow_schema.json",
  "title": "JaneliaSciComp/multifish pipeline parameters",
  "description": "Analysis pipeline for EASI-FISH (Expansion-Assisted Iterative Fluorescence In Situ Hybridization)",
  "type": "object",
  "definitions": {
    "data": {
      "title": "Data",
      "type": "object",
      "description": "Describe your input data and where pipeline results should be saved",
      "properties": {
        "data_manifest": {
          "type": "string",
          "description": "Name or path to the file manifest for downloading input data. Default: segmentation",
          "fa_icon": "far fa-list-alt",
          "help_text": "If specified, the data in the manifest is downloaded into `--data_dir` before the pipeline begins. Valid values are any base filename found in the data-sets directory (e.g. \"demo_small\", \"demo_medium\") or any absolute path which points to a manifest file. By default this just downloads the segmentation model."
        },
        "stitching": {
            "title": "Stitching",
            "type": "object",
            "description": "Stitching options",
            "properties": {
                "stitching_output": {
                    "type": "string",
                    "fa_icon": "far fa-folder",
                    "description": "Output directory for stitching results. Default: stitching",
                    "help_text": "This directory path is relative to `output_dir`",
                    "hidden": true
                },
                "spark_work_dir": {
                    "type": "string",
                    "fa_icon": "fas fa-folder-open",
                    "description": "Path to directory containing Spark working files and logs during stitching. Default: $shared_work_dir/spark or $workDir/spark",
                    "help_text": "The Spark configuration is written here by the pipeline before launching the Spark cluster. The Spark workers write their logs back here, and it is also used to communicate the master IP address to all workers. Therefore, this must be a shared directory accessible to both the head node and all worker nodes. On AWS, Fuse-mounted S3 will not work here due to write buffering. It's best to use FSx, but EBS will also work, as long as its mounted on all the EC2 nodes. ",
                    "hidden": true
                },
                "spark_local_dir": {
                    "type": "string",
                    "fa_icon": "far fa-folder-open",
                    "description": "Path to directory that Spark will uses for local temporary files. Default: /tmp",
                    "help_text": "This path does not need to be shared among workers, and does not need to be accessible to the head node. Usually, /tmp will do.",
                    "hidden": true
                },
                "stitching_czi_pattern": {
                    "type": "string",
                    "description": "A suffix pattern that is applied to acq_names when creating CZI names e.g. \"_V%02d\"",
                    "fa_icon": "far fa-copy"
                },
                "stitching_ref": {
                    "type": "string",
                    "fa_icon": "fas fa-asterisk",
                    "description": "Index of the channel used for stitching, e.g. 'c1' or '1'. You can also specify 'all' to use all of the channels. Default: the dapi_channel",
                    "help_text": "If this is not defined it defaults to `dapi_channel`"
                },
                "resolution": {
                    "type": "string",
                    "fa_icon": "fas fa-file-image",
                    "pattern": "^[\\.\\d]+,[\\.\\d]+,[\\.\\d]+$",
                    "description": "Voxel resolution in all 3 dimensions. Default: 0.23,0.23,0.42",
                    "help_text": "This is a comma-delimited tuple as x,y,z."
                },
                "axis": {
                    "type": "string",
                    "fa_icon": "fas fa-chart-line",
                    "description": "Axis mapping for the objective->pixel coordinates conversion. Default: -x,y,z",
                    "help_text": "Comma-separated axis specification with optional flips."
                },
                "stitching_block_size": {
                    "type": "string",
                    "fa_icon": "fas fa-cube",
                    "pattern": "^\\d+,\\d+,\\d+$",
                    "description": "Block size to use when converting CZI to n5 before stitching. Default: 128,128,64"
                },
                "flatfield_correction": {
                    "type": "boolean",
                    "fa_icon": "fas fa-cube",
                    "description": "Apply flatfield correction before stitching? Default: true"
                },
                "retile_z_size": {
                    "type": "integer",
                    "fa_icon": "far fa-square",
                    "description": "Block size (in Z dimension) when retiling after stitching. Default: 64",
                    "help_text": "This must be smaller than the number of Z slices in the data."
                },
                "with_fillBackground": {
                    "type": "boolean",
                    "fa_icon": "far fa-square",
                    "description": "Use fillBackground option when running fuse step. Default: true",
                    "help_text": "Turning this off may help process certain types of data that error otherwise.",
                    "hidden": true
                },
                "stitching_mode": {
                    "type": "string",
                    "fa_icon": "fas fa-braille",
                    "description": "Rematching mode ('full' or 'incremental'). Default: incremental",
                    "hidden": true
                },
                "stitching_padding": {
                    "type": "string",
                    "fa_icon": "fas fa-expand",
                    "description": "Padding for the overlap regions. Default: 0,0,0"
                },
                "stitching_blur_sigma": {
                    "type": "integer",
                    "fa_icon": "fas fa-border-style",
                    "description": "Sigma value of the gaussian blur preapplied to the images before stitching. Default: 2"
                },
                "workers": {
                    "type": "integer",
                    "fa_icon": "fas fa-cogs",
                    "description": "Number of Spark workers to use for stitching one acquisition. Default: 4"
                },
                "worker_cores": {
                    "type": "integer",
                    "fa_icon": "fas fa-microchip",
                    "description": "Number of cores allocated to each Spark worker. Default: 4"
                },
                "gb_per_core": {
                    "type": "integer",
                    "fa_icon": "fas fa-cog",
                    "description": "Size of memory (in GB) that is allocated for each core of a Spark worker. Default: 4",
                    "help_text": "The total memory usage for stitching one acquisition will be workers * worker_cores * gb_per_core. "
                },
                "driver_memory": {
                    "type": "string",
                    "fa_icon": "fas fa-memory",
                    "description": "Amount of memory to allocate for the Spark driver. Default: 15g"
                },
                "wait_for_spark_timeout_seconds": {
                    "type": "integer",
                    "fa_icon": "fas fa-clock",
                    "description": "Number of seconds to wait for Spark cluster to start. Default: 3600",
                    "hidden": true
                },
                "sleep_between_timeout_checks_seconds": {
                    "type": "integer",
                    "fa_icon": "fas fa-clock",
                    "description": "Number of seconds to sleep between timeout checks. Default: 2",
                    "hidden": true
                },
                "stitching_app": {
                    "type": "string",
                    "fa_icon": "fas fa-file-medical-alt",
                    "description": "Path to the JAR file containing the stitching application. Default: /app/app.jar",
                    "hidden": true
                }
            },
            "fa_icon": "far fa-map"
        },
        "shared_work_dir": {
          "type": "string",
          "description": "Shared working directory accessible by all nodes. Typically something like /fsx/username/pipeline",
          "help_text": "Setting this parameter will automatically configure `data_dir`, `output_dir`, `segmentation_model_dir`, `spark_work_dir`, and `singularity_cache_dir`. You can override any of them in the hidden settings. When running on a system like AWS Batch, you should set this to an FSx for Lustre filesystem, and the final_output_dir to a Fuse-mounted S3 bucket. This will cause all processing to happen on high-performance disk, and the outputs will only be copied to slower S3 at the very last step. \n",
          "fa_icon": "fas fa-folder-open"
        },
        "data_dir": {
          "type": "string",
          "fa_icon": "fas fa-folder-open",
          "description": "Path to the directory containing the input CZI/MVL acquisition files. If shared_work_dir is defined, this defaults to $shared_work_dir/inputs.",
          "hidden": true,
          "help_text": "If `shared_work_dir` is defined, this is automatically set to `$shared_work_dir/inputs`."
        },
        "segmentation_model_dir": {
          "type": "string",
          "fa_icon": "fas fa-folder-open",
          "description": "Path to the directory containing the machine learning model for segmentation.",
          "help_text": "If `shared_work_dir` is defined, this is automatically set to `$shared_work_dir/inputs/model/starfinity`. It is assumed that either the model is already there, or it will be downloaded and unzipped according to the `data_manifest`. Otherwise it defaults to ${projectDir}/external-modules/segmentation/model/starfinity, which is normally configured by setup.sh. ",
          "hidden": true
        },
        "output_dir": {
          "type": "string",
          "description": "Path to the directory containing pipeline outputs. If shared_work_dir is defined, this defaults to $shared_work_dir/outputs.",
          "fa_icon": "fas fa-folder-open",
          "hidden": true,
          "help_text": "If `shared_work_dir` is defined, this is automatically set to `$shared_work_dir/outputs`."
        },
        "rs_fish": {
            "title": "Spot Extraction: RS-FISH",
            "type": "object",
            "description": "Options for the RS-FISH spot extraction algorithm",
            "fa_icon": "fas fa-eye-dropper",
            "properties": {
                "use_rsfish": {
                    "type": "boolean",
                    "description": "Use RS-FISH instead of AirLocalize for Spot Extraction. Default: false",
                    "fa_icon": "fas fa-fish"
                },
                "rsfish_min": {
                    "type": "integer",
                    "description": "Minimal intensity of the image. Default: 0",
                    "fa_icon": "fas fa-angle-double-down"
                },
                "rsfish_max": {
                    "type": "integer",
                    "description": "Maximal intensity of the image. Default: 4096",
                    "fa_icon": "fas fa-angle-double-up"
                },
                "rsfish_anisotropy": {
                    "type": "number",
                    "description": "The anisotropy factor. Default: 0.7",
                    "help_text": "Scaling of z relative to xy. Can be determined using the RS-FISH anisotropy plugin in Fiji.",
                    "fa_icon": "fas fa-arrows-alt"
                },
                "rsfish_sigma": {
                    "type": "number",
                    "description": "Sigma value for Difference-of-Gaussian (DoG) calculation. Default 1.5",
                    "fa_icon": "fab fa-etsy"
                },
                "rsfish_threshold": {
                    "type": "number",
                    "description": "Threshold value for Difference-of-Gaussian (DoG) calculation. Default: 0.007",
                    "fa_icon": "fas fa-level-down-alt"
                },
                "rsfish_background": {
                    "type": "integer",
                    "description": "Background subtraction method, 0 == None, 1 == Mean, 2==Median, 3==RANSAC on Mean, 4==RANSAC on Median. Default: 0 (None)",
                    "fa_icon": "fas fa-level-down-alt"
                },
                "rsfish_intensity": {
                    "type": "integer",
                    "description": "Intensity calculation method, 0 == Linear Interpolation, 1 == Gaussian fit (on inlier pixels), 2 == Integrate spot intensities (on candidate pixels). Default: 0 (Linear Interpolation)",
                    "fa_icon": "fas fa-level-down-alt"
                },
                "per_channel.rsfish_min": {
                  "type": "string",
                  "description": "Comma delimited per channel values for rsfish_min",
                  "fa_icon": "fas fa-terminal"
                },
                "per_channel.rsfish_max": {
                  "type": "string",
                  "description": "Comma delimited per channel values for rsfish_max",
                  "fa_icon": "fas fa-terminal"
                },
                "per_channel.rsfish_anisotropy": {
                  "type": "string",
                  "description": "Comma delimited per channel values for rsfish_anisotropy",
                  "fa_icon": "fas fa-terminal"
                },
                "per_channel.rsfish_sigma": {
                  "type": "string",
                  "description": "Comma delimited per channel values for rsfish_sigma",
                  "fa_icon": "fas fa-terminal"
                },
                "per_channel.rsfish_threshold": {
                  "type": "string",
                  "description": "Comma delimited per channel values for rsfish_threshold",
                  "fa_icon": "fas fa-terminal"
                },
                "per_channel.rsfish_background": {
                  "type": "string",
                  "description": "Comma delimited per channel values for rsfish_background",
                  "fa_icon": "fas fa-terminal"
                },
                "per_channel.rsfish_intensity": {
                  "type": "string",
                  "description": "Comma delimited per channel values for rsfish_intensity",
                  "fa_icon": "fas fa-terminal"
                },
                "rsfish_params": {
                    "type": "string",
                    "description": "Any other parameters to pass to the RS-FISH algorithm.",
                    "help_text": "Complete parameter documentation for RS-FISH is [available here](https://github.com/PreibischLab/RS-FISH-Spark/blob/main/src/main/java/net/preibisch/rsfish/spark/SparkRSFISH.java).",
                    "fa_icon": "fas fa-terminal"
                },
                "rsfish_workers": {
                    "type": "integer",
                    "fa_icon": "fas fa-cogs",
                    "description": "Number of Spark workers to use for RS-FISH spot detection. Default: 4"
                },
                "rsfish_worker_cores": {
                    "type": "integer",
                    "fa_icon": "fas fa-microchip",
                    "description": "Number of cores allocated to each RS-FISH Spark worker. Default: 4"
                },
                "rsfish_gb_per_core": {
                    "type": "integer",
                    "fa_icon": "fas fa-cog",
                    "description": "Size of memory (in GB) that is allocated for each core of a RS-FISH Spark worker. Default: 4",
                    "help_text": "The total memory usage for one acquisition will be workers * worker_cores * gb_per_core."
                },
                "rsfish_driver_cores": {
                    "type": "string",
                    "fa_icon": "fas fa-microchip",
                    "description": "Number of cores allocated for the RS-FISH Spark driver. Default: 1"
                },
                "rsfish_driver_memory": {
                    "type": "string",
                    "fa_icon": "fas fa-memory",
                    "description": "Amount of memory to allocate for the RS-FISH Spark driver. Default: 15g"
                }
            }
        },
        "acq_names": {
          "type": "string",
          "fa_icon": "fas fa-vial",
          "description": "Names of acquisition rounds to process. These should match the names of the CZI/MVL files found in the data_dir.",
          "help_text": "e.g. LHA3_R3_small,LHA3_R5_small if you have files called LHA3_R3_small.czi and LHA3_R5_small.czi"
        },
        "ref_acq": {
          "type": "string",
          "fa_icon": "fas fa-asterisk",
          "description": "Name of the acquisition round to use as the fixed reference.",
          "help_text": "e.g. LHA3_R3_small"
        },
        "channels": {
          "type": "string",
          "fa_icon": "fas fa-layer-group",
          "description": "List of channel names to process.",
          "help_text": "Channel names are specified in the format \"c[channel_number]\", where the channel_number is 0-indexed."
        },
        "dapi_channel": {
          "type": "string",
          "fa_icon": "fas fa-asterisk",
          "description": "Name of the DAPI channel.",
          "help_text": "The DAPI channel is used as a reference channel for registration, segmentation, and spot extraction."
        },
        "bleed_channel": {
          "type": "string",
          "fa_icon": "fas fa-asterisk",
          "description": "Channel (other than DAPI) that needs bleedthrough correction."
        }
      },
      "required": [
        "shared_work_dir",
        "acq_names",
        "ref_acq",
        "channels",
        "dapi_channel"
      ]
    },
    "stitching": {
      "title": "Stitching",
      "type": "object",
      "description": "Stitching options",
      "properties": {
        "stitching_output": {
          "type": "string",
          "fa_icon": "far fa-folder",
          "description": "Output directory for stitching results. Default: stitching",
          "help_text": "This directory path is relative to `output_dir`",
          "hidden": true
        },
        "spark_work_dir": {
          "type": "string",
          "fa_icon": "fas fa-folder-open",
          "description": "Path to directory containing Spark working files and logs during stitching. Default: $shared_work_dir/spark or $workDir/spark",
          "help_text": "The Spark configuration is written here by the pipeline before launching the Spark cluster. The Spark workers write their logs back here, and it is also used to communicate the master IP address to all workers. Therefore, this must be a shared directory accessible to both the head node and all worker nodes. On AWS, Fuse-mounted S3 will not work here due to write buffering. It's best to use FSx, but EBS will also work, as long as its mounted on all the EC2 nodes. ",
          "hidden": true
        },
        "spark_local_dir": {
          "type": "string",
          "fa_icon": "far fa-folder-open",
          "description": "Path to directory that Spark will uses for local temporary files. Default: /tmp",
          "help_text": "This path does not need to be shared among workers, and does not need to be accessible to the head node. Usually, /tmp will do.",
          "hidden": true
        },
        "stitching_czi_pattern": {
          "type": "string",
          "description": "A suffix pattern that is applied to acq_names when creating CZI names e.g. \"_V%02d\"",
          "fa_icon": "far fa-copy"
        },
        "stitching_ref": {
          "type": "string",
          "fa_icon": "fas fa-asterisk",
          "description": "Index of the channel used for stitching, e.g. 'c1' or '1'. You can also specify 'all' to use all of the channels. Default: the dapi_channel",
          "help_text": "If this is not defined it defaults to `dapi_channel`"
        },
        "resolution": {
          "type": "string",
          "fa_icon": "fas fa-file-image",
          "pattern": "^[\\.\\d]+,[\\.\\d]+,[\\.\\d]+$",
          "description": "Voxel resolution in all 3 dimensions. Default: 0.23,0.23,0.42",
          "help_text": "This is a comma-delimited tuple as x,y,z."
        },
        "axis": {
          "type": "string",
          "fa_icon": "fas fa-chart-line",
          "description": "Axis mapping for the objective->pixel coordinates conversion. Default: -x,y,z",
          "help_text": "Comma-separated axis specification with optional flips."
        },
        "stitching_block_size": {
          "type": "string",
          "fa_icon": "fas fa-cube",
          "pattern": "^\\d+,\\d+,\\d+$",
          "description": "Block size to use when converting CZI to n5 before stitching. Default: 128,128,64"
        },
        "flatfield_correction": {
          "type": "boolean",
          "fa_icon": "fas fa-cube",
          "description": "Apply flatfield correction before stitching? Default: true"
        },
        "retile_z_size": {
          "type": "integer",
          "fa_icon": "far fa-square",
          "description": "Block size (in Z dimension) when retiling after stitching. Default: 64",
          "help_text": "This must be smaller than the number of Z slices in the data."
        },
        "with_fillBackground": {
          "type": "boolean",
          "fa_icon": "far fa-square",
          "description": "Use fillBackground option when running fuse step. Default: true",
          "help_text": "Turning this off may help process certain types of data that error otherwise.",
          "hidden": true
        },
        "stitching_mode": {
          "type": "string",
          "fa_icon": "fas fa-braille",
          "description": "Rematching mode ('full' or 'incremental'). Default: incremental",
          "hidden": true
        },
        "stitching_padding": {
          "type": "string",
          "fa_icon": "fas fa-expand",
          "description": "Padding for the overlap regions. Default: 0,0,0"
        },
        "stitching_blur_sigma": {
          "type": "integer",
          "fa_icon": "fas fa-border-style",
          "description": "Sigma value of the gaussian blur preapplied to the images before stitching. Default: 2"
        },
        "workers": {
          "type": "integer",
          "fa_icon": "fas fa-cogs",
          "description": "Number of Spark workers to use for stitching one acquisition. Default: 4"
        },
        "worker_cores": {
          "type": "integer",
          "fa_icon": "fas fa-microchip",
          "description": "Number of cores allocated to each Spark worker. Default: 4"
        },
        "gb_per_core": {
          "type": "integer",
          "fa_icon": "fas fa-cog",
          "description": "Size of memory (in GB) that is allocated for each core of a Spark worker. Default: 4",
          "help_text": "The total memory usage for stitching one acquisition will be workers * worker_cores * gb_per_core. "
        },
        "driver_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory to allocate for the Spark driver. Default: 15g"
        },
        "wait_for_spark_timeout_seconds": {
          "type": "integer",
          "fa_icon": "fas fa-clock",
          "description": "Number of seconds to wait for Spark cluster to start. Default: 3600",
          "hidden": true
        },
        "sleep_between_timeout_checks_seconds": {
          "type": "integer",
          "fa_icon": "fas fa-clock",
          "description": "Number of seconds to sleep between timeout checks. Default: 2",
          "hidden": true
        },
        "stitching_app": {
          "type": "string",
          "fa_icon": "fas fa-file-medical-alt",
          "description": "Path to the JAR file containing the stitching application. Default: /app/app.jar",
          "hidden": true
        }
      },
      "fa_icon": "far fa-map"
    },
    "registration": {
      "title": "Registration",
      "type": "object",
      "description": "Options for the registration algorithm (Bigstream Prototype)",
      "properties": {
        "registration_output": {
          "type": "string",
          "fa_icon": "far fa-folder",
          "description": "Output directory for registration results. Default: registration",
          "help_text": "This path is relative to `output_dir`.",
          "hidden": true
        },
        "aff_scale": {
          "type": "string",
          "description": "The scale level for affine alignments. Default: s3",
          "fa_icon": "fas fa-file-image"
        },
        "def_scale": {
          "type": "string",
          "description": "The scale level for deformable alignments. Default: s2",
          "fa_icon": "fas fa-file-image"
        },
        "spots_cc_radius": {
          "type": "integer",
          "fa_icon": "far fa-circle",
          "description": "Default: 8"
        },
        "spots_spot_number": {
          "type": "integer",
          "fa_icon": "fas fa-hashtag",
          "description": "Default: 2000"
        },
        "ransac_cc_cutoff": {
          "type": "number",
          "fa_icon": "fas fa-level-down-alt",
          "description": "Default: 0.9"
        },
        "ransac_dist_threshold": {
          "type": "number",
          "fa_icon": "fas fa-level-down-alt",
          "description": "Default: 2.5"
        },
        "deform_iterations": {
          "type": "string",
          "fa_icon": "fas fa-retweet",
          "description": "Default: 500x200x25x1"
        },
        "deform_auto_mask": {
          "type": "string",
          "fa_icon": "fas fa-mask",
          "description": "Default: 0"
        },
        "registration_xy_stride": {
          "type": "integer",
          "description": "The number of voxels along x/y for registration tiling. Default: 256",
          "fa_icon": "fas fa-walking",
          "help_text": "Must be power of 2."
        },
        "registration_xy_overlap": {
          "type": "integer",
          "description": "Tile overlap on x/y axes",
          "help_text": "Defaults to registration_xy_stride/8 when not specified.",
          "fa_icon": "fas fa-align-center"
        },
        "registration_z_stride": {
          "type": "integer",
          "description": "The number of voxels along z for registration tiling. Default: 256",
          "fa_icon": "fas fa-walking",
          "help_text": "Must be power of 2."
        },
        "registration_z_overlap": {
          "type": "integer",
          "description": "Tile overlap on Z axes",
          "help_text": "Defaults to registration_z_stride/8 when not specified.",
          "fa_icon": "fas fa-align-center"
        },
        "ransac_cpus": {
          "type": "integer",
          "fa_icon": "fas fa-microchip",
          "description": "Number of CPU cores for RANSAC. Default: 1"
        },
        "ransac_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory for RANSAC. Default: 1 G"
        },
        "spots_cpus": {
          "type": "string",
          "fa_icon": "fas fa-microchip",
          "description": "Number of CPU cores for Spots step of registration. Default: 1"
        },
        "spots_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory for Spots step of registration. Default: 2 G"
        },
        "interpolate_cpus": {
          "type": "integer",
          "fa_icon": "fas fa-microchip",
          "description": "Number of CPU cores for Interpolate step of registration. Default: 1"
        },
        "interpolate_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory for Interpolate step of registration. Default: 1 G"
        },
        "coarse_spots_cpus": {
          "type": "integer",
          "fa_icon": "fas fa-microchip",
          "description": "Number of CPU cores for Coarse Spots step of registration. Default: 1"
        },
        "coarse_spots_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory for Coarse Spots step of registration. Default: 2 G"
        },
        "aff_scale_transform_cpus": {
          "type": "integer",
          "description": "Number of CPU cores for Affine Scale Transform step of registration. Default: 1",
          "fa_icon": "fas fa-microchip"
        },
        "aff_scale_transform_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory for Affine Scale Transform step of registration. Default: 15 G"
        },
        "def_scale_transform_cpus": {
          "type": "integer",
          "description": "Number of CPU cores for deformable scale registration. Default: 8",
          "fa_icon": "fas fa-microchip"
        },
        "def_scale_transform_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory for Deformable Scale Transform step of registration. Default: 80 G"
        },
        "deform_cpus": {
          "type": "integer",
          "fa_icon": "fas fa-microchip",
          "description": "Number of CPU cores for Deform step of registration. Default: 1"
        },
        "deform_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory for Deform step of registration. Default: 10 G"
        },
        "registration_stitch_cpus": {
          "type": "integer",
          "description": "Number of CPU cores for Stitch step of registration. Default: 2",
          "fa_icon": "fas fa-microchip"
        },
        "registration_stitch_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory for Stitch step of registration. Default: 20 G"
        },
        "registration_transform_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory for final Transform step of registration. Default: 80 G"
        },
        "registration_transform_cpus": {
          "type": "integer",
          "description": "Number of CPU cores for final Transform step of registration. Default: 12",
          "fa_icon": "fas fa-microchip"
        },
        "use_bigstream": {
          "type": "boolean",
          "description": "If true uses Bigstream2 based registration"
        },
        "dask_workers": {
          "type": "number",
          "description": "Number of dask workers used for local bigstream registration"
        }
      },
      "fa_icon": "fas fa-layer-group"
    },
    "bigstream2_registration": {
      "title": "Bigstream2 Registration",
      "type": "object",
      "description": "Options for the registration using Bigstream2",
      "properties": {
        "bigstream_global_steps": {
          "type": "string",
          "description": "comma delimited list of global alignment steps",
          "default": "ransac,affine"
        },
        "bigstream_global_use_existing_affine_if_found": {
          "type": "boolean",
          "default": true
        },
        "bigstream_global_ransac_spot_detection_method": {
          "type": "string",
          "description": "Method used for spot detection: Laplacian of Gaussian (log) or Difference of Gaussian (dog).",
          "default": "log"
        },
        "bigstream_global_shrink_factors": {
          "type": "integer",
          "default": 2
        },
        "bigstream_global_ransac_blob_sizes": {
          "type": "string",
          "description": "blob sizes used by the global ransac blob detection",
          "default": "6,20"
        },
        "bigstream_global_ransac_fix_spot_winsorize_limits": {
          "type": "string",
          "description": "ransac winsorize limits for global fix image",
          "default": "0.02,0.02"
        },
        "bigstream_global_ransac_mov_spot_winsorize_limits": {
          "type": "string",
          "description": "ransac winsorize limits for global moving image",
          "default": "0.02,0.02"
        },
        "bigstream_global_ransac_num_sigma_max": {
          "type": "integer",
          "default": 7
        },
        "bigstream_global_ransac_cc_radius": {
          "type": "integer",
          "default": 12
        },
        "bigstream_global_ransac_diagonal_constraint": {
          "type": "number",
          "default": 0.75
        },
        "bigstream_global_ransac_match_threshold": {
          "type": "number",
          "default": 0.6
        },
        "bigstream_global_ransac_align_threshold": {
          "type": "integer",
          "default": 2
        },
        "bigstream_global_ransac_fix_spot_detection_threshold": {
          "type": "number",
          "default": 0.001
        },
        "bigstream_global_ransac_fix_spot_detection_threshold_rel": {
          "type": "number",
          "default": 0.05
        },
        "bigstream_global_ransac_mov_spot_detection_threshold": {
          "type": "number",
          "default": 0.001
        },
        "bigstream_global_ransac_mov_spot_detection_threshold_rel": {
          "type": "number",
          "default": 0.05
        },
        "bigstream_global_ransac_nspots": {
          "type": "integer",
          "default": 2000
        },
        "bigstream_global_ransac_fix_spots_count_threshold": {
          "type": "integer",
          "default": 100
        },
        "bigstream_global_ransac_mov_spots_count_threshold": {
          "type": "integer",
          "default": 100
        },
        "bigstream_global_ransac_point_matches_threshold": {
          "type": "integer",
          "default": 50
        },
        "bigstream_global_iterations": {
          "type": "integer",
          "description": "Number of iterations used for global affine",
          "default": 100
        },
        "bigstream_global_smooth_sigmas": {
          "type": "number",
          "default": 2.5
        },
        "bigstream_global_learning_rate": {
          "type": "number",
          "default": 0.25
        },
        "bigstream_global_metric": {
          "type": "string"
        },
        "bigstream_global_optimizer": {
          "type": "string"
        },
        "bigstream_global_sampling": {
          "type": "string"
        },
        "bigstream_global_interpolator": {
          "type": "string"
        },
        "bigstream_global_sampling_percentage": {
          "type": "string"
        },
        "bigstream_global_alignment_spacing": {
          "type": "string"
        },
        "bigstream_dask_config": {
          "type": "string",
          "default": "./configs/bigstream_dask_config.yml"
        },
        "bigstream_local_steps": {
          "type": "string",
          "description": "comma delimited list of local alignment steps",
          "default": "ransac,deform"
        },
        "bigstream_local_transform_blocksize": {
          "type": "string",
          "default": "128,128,128"
        },
        "bigstream_local_overlap_factor": {
          "type": "number",
          "default": 0.25
        },
        "bigstream_local_ransac_spot_detection_method": {
          "type": "string"
        },
        "bigstream_local_ransac_blob_sizes": {
          "type": "string",
          "description": "blob sizes used by the local ransac blob detection",
          "default": "6,20"
        },
        "bigstream_local_ransac_fix_spot_winsorize_limits": {
          "type": "string",
          "description": "ransac winsorize limits for local moving image",
          "default": "0.02,0.02"
        },
        "bigstream_local_ransac_mov_spot_winsorize_limits": {
          "type": "string",
          "description": "ransac winsorize limits for local moving image",
          "default": "0.02,0.02"
        },
        "bigstream_local_shrink_factors": {
          "type": "integer",
          "default": 2
        },
        "bigstream_local_ransac_num_sigma_max": {
          "type": "integer",
          "default": 7
        },
        "bigstream_local_ransac_cc_radius": {
          "type": "integer",
          "default": 12
        },
        "bigstream_local_ransac_nspots": {
          "type": "integer",
          "default": 2000
        },
        "bigstream_local_ransac_diagonal_constraint": {
          "type": "number",
          "default": 0.75
        },
        "bigstream_local_ransac_match_threshold": {
          "type": "number",
          "default": 0.6
        },
        "bigstream_local_ransac_align_threshold": {
          "type": "integer",
          "default": 2
        },
        "bigstream_local_ransac_fix_spot_detection_threshold": {
          "type": "number",
          "default": 0.0001
        },
        "bigstream_local_ransac_fix_spot_detection_threshold_rel": {
          "type": "number",
          "default": 0.01
        },
        "bigstream_local_ransac_mov_spot_detection_threshold": {
          "type": "number",
          "default": 0.0001
        },
        "bigstream_local_ransac_mov_spot_detection_threshold_rel": {
          "type": "number",
          "default": 0.01
        },
        "bigstream_local_ransac_fix_spots_count_threshold": {
          "type": "integer",
          "default": 100
        },
        "bigstream_local_ransac_mov_spots_count_threshold": {
          "type": "integer",
          "default": 100
        },
        "bigstream_local_ransac_point_matches_threshold": {
          "type": "integer",
          "default": 50
        },
        "bigstream_local_control_point_spacing": {
          "type": "integer",
          "default": 50
        },
        "bigstream_local_control_point_levels": {
          "type": "integer",
          "default": 1
        },
        "bigstream_local_smooth_sigmas": {
          "type": "number",
          "default": 0.25
        },
        "bigstream_local_learning_rate": {
          "type": "number",
          "default": 0.25
        },
        "bigstream_local_metric": {
          "type": "string"
        },
        "bigstream_local_optimizer": {
          "type": "string"
        },
        "bigstream_local_sampling": {
          "type": "string"
        },
        "bigstream_local_interpolator": {
          "type": "string"
        },
        "bigstream_local_sampling_percentage": {
          "type": "string"
        },
        "bigstream_local_alignment_spacing": {
          "type": "string"
        },
        "bigstream_inv_iterations": {
          "type": "integer",
          "default": 5,
          "hidden": true
        },
        "bigstream_inv_order": {
          "type": "integer",
          "default": 2,
          "hidden": true
        },
        "bigstream_inv_sqrt_iterations": {
          "type": "integer",
          "default": 5,
          "hidden": true
        },
        "bigstream_local_iterations": {
          "type": "integer",
          "description": "Number of iterations used for local deform",
          "default": 5
        },
        "bigstream_local_max_tasks": {
          "type": "integer",
          "default": 0,
          "hidden": true
        }
      }
    },
    "cell_segmentation_common": {
      "title": "Cell Segmentation",
      "description": "Common segmentation parameters",
      "help_text": "",
      "type": "object",
      "fa_icon": "fab fa-cloudsmith",
      "properties": {
        "segmentation_output": {
          "type": "string",
          "fa_icon": "far fa-folder",
          "description": "Output directory for segmentation results. Default: segmentation",
          "help_text": "This path is relative to `output_dir`.",
          "hidden": true
        },
        "segmentation_scale": {
          "type": "string",
          "fa_icon": "fas fa-cube",
          "description": "Imagery scale to use for segmentation. Default: s2"
        },
        "segmentation_cpus": {
          "type": "integer",
          "fa_icon": "fas fa-microchip",
          "description": "Number of CPU cores for segmentation. Default: 3"
        },
        "segmentation_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory for segmentation. Default: 45 G"
        },
        "use_cellpose": {
          "type": "boolean"
        }
      }
    },
    "cell_segmentation_starfinity": {
      "title": "Cell Segmentation - Stardist",
      "type": "object",
      "description": "",
      "default": "Cell segmentation using Stardist",
      "properties": {
        "stardist_tile_size": {
          "type": "integer",
          "default": 64
        },
        "stardist_affinity_thresh": {
          "type": "number",
          "default": 0.7
        },
        "stardist_prob_thresh": {
          "type": "number",
          "default": 0.2
        },
        "stardist_nms_thresh": {
          "type": "number",
          "default": 0.8
        }
      }
    },
    "cell_segmentation_cellpose": {
      "title": "Cell Segmentation - Cellpose",
      "type": "object",
      "description": "",
      "default": "Cell segmentation using Cellpose",
      "properties": {
        "distributed_cellpose": {
          "type": "boolean",
          "default": true,
          "description": "Use a dask cluster to run cellpose"
        },
        "cellpose_model": {
          "type": "string",
          "default": "cyto",
          "description": "Cellpose model"
        },
        "cellpose_diameter": {
          "type": "integer",
          "default": 30,
          "description": "Default cell diameter"
        },
        "cellpose_dask_status_port_binding": {
          "type": "string",
          "description": "Dask scheduler port binding when using the docker profile"
        },
        "cellpose_dask_workers": {
          "type": "integer",
          "default": 2,
          "description": "Maximum number of Dask workers"
        },
        "cellpose_required_workers": {
          "type": "integer",
          "default": 1,
          "description": "Required number of available Dask workers"
        },
        "cellpose_driver_cpus": {
          "type": "integer",
          "default": 2,
          "description": "CPUs for the cellpose main program"
        },
        "cellpose_driver_mem_gb": {
          "type": "integer",
          "default": 12,
          "description": "Mem (in GB) available to the cellpose main program"
        },
        "cellpose_worker_cpus": {
          "type": "integer",
          "default": 2,
          "description": "CPUs for cellpose Dask workers"
        },
        "cellpose_worker_memgb": {
          "type": "integer",
          "default": 10,
          "description": "Mem (in GB) available to the cellpose Dask workers"
        },
        "cellpose_process_blocksize": {
          "type": "string",
          "default": "128,128,128"
        },
        "cellpose_min_size": {
          "type": "integer",
          "default": 10
        },
        "cellpose_cellprob_threshold": {
          "type": "integer",
          "default": 1
        },
        "cellpose_iou_depth": {
          "type": "integer",
          "default": 1
        },
        "cellpose_iou_threshold": {
          "type": "number",
          "default": 0.05
        },
        "cellpose_models_dir": {
          "type": "string",
          "default": "./work/cellpose-models"
        },
        "cellpose_work_dir": {
          "type": "string"
        },
        "cellpose_dask_work_dir": {
          "type": "string",
          "default": "./work/cellpose_dask"
        },
        "cellpose_dask_config": {
          "type": "string"
        }
      }
    },
    "spot_extraction": {
      "title": "Spot Extraction",
      "type": "object",
      "description": "Options for spot extraction",
      "fa_icon": "fas fa-eye-dropper",
      "properties": {
        "spot_extraction_output": {
          "type": "string",
          "fa_icon": "far fa-folder",
          "description": "Output directory for spot extraction results. Default: spots",
          "help_text": "This path is relative to `output_dir`.",
          "hidden": true
        },
        "spot_extraction_scale": {
          "type": "string",
          "fa_icon": "far fa-folder",
          "description": "Scale of imagery to use for spot extraction. Default: s0"
        }
      }
    },
    "airlocalize": {
      "title": "Spot Extraction: Airlocalize",
      "type": "object",
      "description": "Options for the AirLocalize spot extraction algorithm",
      "fa_icon": "fas fa-eye-dropper",
      "properties": {
        "airlocalize_xy_stride": {
          "type": "integer",
          "fa_icon": "fas fa-cube",
          "description": "The number of voxels along x/y for registration tiling. Default: 1024",
          "help_text": "Must be power of 2. Increasing this requires increasing `airlocalize_memory`."
        },
        "airlocalize_xy_overlap": {
          "type": "integer",
          "fa_icon": "fas fa-cube",
          "description": "Tile overlap on x/y axes",
          "help_text": "Defaults to 5% of airlocalize_xy_stride"
        },
        "airlocalize_z_stride": {
          "type": "integer",
          "fa_icon": "fas fa-cube",
          "description": "The number of voxels along Z for registration tiling.  Default: 512",
          "help_text": "Must be a power of 2. Increasing this requires increasing `airlocalize_memory`."
        },
        "airlocalize_z_overlap": {
          "type": "integer",
          "fa_icon": "fas fa-cube",
          "description": "Tile overlap on z axes",
          "help_text": "Defaults to 5% of airlocalize_z_stride"
        },
        "default_airlocalize_params": {
          "type": "string",
          "fa_icon": "far fa-folder",
          "description": "Path to the default AirLocalize parameter file. Default: /app/airlocalize/params/air_localize_default_params.txt",
          "help_text": "By default, this points to default parameters inside the container",
          "hidden": true
        },
        "per_channel_air_localize_params": {
          "type": "string",
          "fa_icon": "far fa-folder",
          "description": "Comma-delimited paths to alternative AirLocalize parameter files, one per channel.",
          "help_text": "If you have 4 channels, and you are extracting spots from c0, c1, and c3, this parameter should look like this: `/path/to/params_c0.txt,/path/to/params_c1.txt,,/path/to/params_c3.txt`. Note the double comma to denote the empty file for c2, which should not be processed."
        },
        "airlocalize_cpus": {
          "type": "integer",
          "fa_icon": "fas fa-microchip",
          "description": "Number of CPU cores to allocate for each AirLocalize job. Default: 1"
        },
        "airlocalize_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of RAM to allocate to each AirLocalize job. Needs to be increased when increasing strides. Default: 2 G"
        }
      }
    },
    "rs_fish": {
      "title": "Spot Extraction: RS-FISH",
      "type": "object",
      "description": "Options for the RS-FISH spot extraction algorithm",
      "fa_icon": "fas fa-eye-dropper",
      "properties": {
        "use_rsfish": {
          "type": "boolean",
          "description": "Use RS-FISH instead of AirLocalize for Spot Extraction. Default: false",
          "fa_icon": "fas fa-fish"
        },
        "rsfish_min": {
          "type": "integer",
          "description": "Minimal intensity of the image. Default: 0",
          "fa_icon": "fas fa-angle-double-down"
        },
        "rsfish_max": {
          "type": "integer",
          "description": "Maximal intensity of the image. Default: 4096",
          "fa_icon": "fas fa-angle-double-up"
        },
        "rsfish_anisotropy": {
          "type": "number",
          "description": "The anisotropy factor. Default: 0.7",
          "help_text": "Scaling of z relative to xy. Can be determined using the RS-FISH anisotropy plugin in Fiji.",
          "fa_icon": "fas fa-arrows-alt"
        },
        "rsfish_sigma": {
          "type": "number",
          "description": "Sigma value for Difference-of-Gaussian (DoG) calculation. Default 1.5",
          "fa_icon": "fab fa-etsy"
        },
        "rsfish_threshold": {
          "type": "number",
          "description": "Threshold value for Difference-of-Gaussian (DoG) calculation. Default: 0.007",
          "fa_icon": "fas fa-level-down-alt"
        },
        "per_channel.rsfish_min": {
          "type": "string",
          "description": "Comma delimited per channel values for rsfish_min",
          "fa_icon": "fas fa-terminal"
        },
        "per_channel.rsfish_max": {
          "type": "string",
          "description": "Comma delimited per channel values for rsfish_max",
          "fa_icon": "fas fa-terminal"
        },
        "per_channel.rsfish_anisotropy": {
          "type": "string",
          "description": "Comma delimited per channel values for rsfish_anisotropy",
          "fa_icon": "fas fa-terminal"
        },
        "per_channel.rsfish_sigma": {
          "type": "string",
          "description": "Comma delimited per channel values for rsfish_sigma",
          "fa_icon": "fas fa-terminal"
        },
        "per_channel.rsfish_threshold": {
          "type": "string",
          "description": "Comma delimited per channel values for rsfish_threshold",
          "fa_icon": "fas fa-terminal"
        },
        "rsfish_params": {
          "type": "string",
          "description": "Any other parameters to pass to the RS-FISH algorithm.",
          "help_text": "Complete parameter documentation for RS-FISH is [available here](https://github.com/PreibischLab/RS-FISH-Spark/blob/main/src/main/java/net/preibisch/rsfish/spark/SparkRSFISH.java).",
          "fa_icon": "fas fa-terminal"
        },
        "rsfish_workers": {
          "type": "integer",
          "fa_icon": "fas fa-cogs",
          "description": "Number of Spark workers to use for RS-FISH spot detection. Default: 4"
        },
        "rsfish_worker_cores": {
          "type": "integer",
          "fa_icon": "fas fa-microchip",
          "description": "Number of cores allocated to each RS-FISH Spark worker. Default: 4"
        },
        "rsfish_gb_per_core": {
          "type": "integer",
          "fa_icon": "fas fa-cog",
          "description": "Size of memory (in GB) that is allocated for each core of a RS-FISH Spark worker. Default: 4",
          "help_text": "The total memory usage for one acquisition will be workers * worker_cores * gb_per_core."
        },
        "rsfish_driver_cores": {
          "type": "string",
          "fa_icon": "fas fa-microchip",
          "description": "Number of cores allocated for the RS-FISH Spark driver. Default: 1"
        },
        "rsfish_driver_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory to allocate for the RS-FISH Spark driver. Default: 15g"
        }
      }
    },
    "spot_warping": {
      "title": "Spot Warping",
      "type": "object",
      "description": "Options for warping detected spots to registration",
      "properties": {
        "warp_spots_cpus": {
          "type": "integer",
          "fa_icon": "fas fa-microchip",
          "description": "Number of CPU cores to use for warp spots. Default: 2"
        },
        "warp_spots_memory": {
          "type": "integer",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory for warp spots in GB. Default: 30"
        }
      },
      "fa_icon": "fas fa-chess-board"
    },
    "intensities": {
      "title": "Intensity Measurement",
      "type": "object",
      "description": "Options for extracting quantified measurements of spot intensities",
      "properties": {
        "measure_intensities_output": {
          "type": "string",
          "fa_icon": "far fa-folder",
          "description": "Output directory for intensities. Default: intensities",
          "help_text": "This path is relative to `output_dir`.",
          "hidden": true
        },
        "measure_intensities_cpus": {
          "type": "integer",
          "fa_icon": "fas fa-microchip",
          "description": "Number of CPU cores to use for intensity measurement. Default: 1"
        },
        "measure_intensities_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory for intensity measurement. Default: 8 G"
        }
      },
      "fa_icon": "fas fa-ruler-horizontal"
    },
    "spot_assignment": {
      "title": "Spot Assignment",
      "type": "object",
      "description": "Options for mapping spot counts to segmented cells",
      "properties": {
        "assign_spots_output": {
          "type": "string",
          "fa_icon": "far fa-folder",
          "description": "Output directory for spot assignments. Default: assignments",
          "help_text": "This path is relative to `output_dir`.",
          "hidden": true
        },
        "assign_spots_cpus": {
          "type": "integer",
          "fa_icon": "fas fa-microchip",
          "description": "Number of CPU cores to use for spot assignment. Default: 1"
        },
        "assign_spots_memory": {
          "type": "string",
          "fa_icon": "fas fa-memory",
          "description": "Amount of memory for spot assignment. Default: 5 G"
        }
      },
      "fa_icon": "fas fa-random"
    },
    "containers": {
      "title": "Container Options",
      "type": "object",
      "fa_icon": "fab fa-docker",
      "properties": {
        "mfrepo": {
          "type": "string",
          "description": "Docker registry/repository to use for containers. Default: public.ecr.aws/janeliascicomp/multifish",
          "fa_icon": "fas fa-database",
          "help_text": "By default, the pipeline uses containers built as part of this project and deployed to DockerHub. You can rebuild the containers and deploy them to your own Registry and specify it here.",
          "hidden": true
        },
        "spark_container_repo": {
          "type": "string",
          "description": "Docker container repo for stitching. Default: `<mfrepo>`",
          "fa_icon": "fas fa-database",
          "hidden": true
        },
        "spark_container_name": {
          "type": "string",
          "description": "Docker container name for stitching. Default: stitching",
          "fa_icon": "fas fa-box-open",
          "hidden": true
        },
        "spark_container_version": {
          "type": "string",
          "description": "Docker container version for stitching. Default: 1.0.0",
          "fa_icon": "fas fa-code-branch",
          "hidden": true
        },
        "registration_container": {
          "type": "string",
          "description": "Docker container for running registration and warp_spots. Default: `<mfrepo>`/registration:1.2.0",
          "fa_icon": "fas fa-box-open",
          "hidden": true
        },
        "segmentation_container": {
          "type": "string",
          "description": "Docker container for running segmentation. Default: `<mfrepo>`/segmentation:1.0.0",
          "fa_icon": "fas fa-box-open",
          "hidden": true
        },
        "airlocalize_container": {
          "type": "string",
          "description": "Docker container for running spot extraction. Default: `<mfrepo>`/airlocalize:1.0.2",
          "fa_icon": "fas fa-box-open",
          "hidden": true
        },
        "spots_assignment_container": {
          "type": "string",
          "description": "Docker container for running intensity measurement and spot assignment. Default: `<mfrepo>`/spot_assignment:1.2.0",
          "fa_icon": "fas fa-box-open",
          "hidden": true
        }
      },
      "description": "Customize the Docker containers used for each pipeline step"
    },
    "other": {
      "title": "Other Options",
      "type": "object",
      "fa_icon": "fas fa-list-ul",
      "properties": {
        "skip": {
          "type": "string",
          "description": "Comma-delimited list of steps to skip, e.g. stitching,registration.",
          "fa_icon": "fas fa-fast-forward",
          "help_text": "Valid values: stitching,spot_extraction,segmentation,registration,warp_spots,measure_intensities,assign_spots"
        },
        "singularity_cache_dir": {
          "type": "string",
          "description": "Shared directory where Singularity containers are cached. Default: $shared_work_dir/singularity_cache or $HOME/.singularity_cache",
          "fa_icon": "fas fa-folder-open",
          "hidden": true
        },
        "singularity_user": {
          "type": "string",
          "fa_icon": "fas fa-user",
          "description": "User to use for running Singularity containers. Default: $USER",
          "hidden": true,
          "help_text": "This is automatically set to `ec2-user` when using the 'tower' profile"
        },
        "runtime_opts": {
          "type": "string",
          "fa_icon": "fas fa-terminal",
          "help_text": "Runtime options for Singularity must include mounts for any directory paths you are using. You can also pass the --nv flag here to make use of NVIDIA GPU resources. For example, `--nv -B /your/data/dir -B /your/output/dir`\n",
          "description": "Runtime options for the container engine being used (e.g. Singularity or Docker)."
        },
        "lsf_opts": {
          "type": "string",
          "description": "Options for LSF cluster at Janelia, when using the lsf profile.",
          "fa_icon": "fas fa-terminal"
        }
      },
      "description": "Other global options affecting all pipelines stages"
    }
  },
  "allOf": [
    {
      "$ref": "#/definitions/data"
    },
    {
      "$ref": "#/definitions/stitching"
    },
    {
      "$ref": "#/definitions/registration"
    },
    {
      "$ref": "#/definitions/bigstream2_registration"
    },
    {
      "$ref": "#/definitions/cell_segmentation_common"
    },
    {
      "$ref": "#/definitions/cell_segmentation_starfinity"
    },
    {
      "$ref": "#/definitions/cell_segmentation_cellpose"
    },
    {
      "$ref": "#/definitions/spot_extraction"
    },
    {
      "$ref": "#/definitions/airlocalize"
    },
    {
      "$ref": "#/definitions/rs_fish"
    },
    {
      "$ref": "#/definitions/spot_warping"
    },
    {
      "$ref": "#/definitions/intensities"
    },
    {
      "$ref": "#/definitions/spot_assignment"
    },
    {
      "$ref": "#/definitions/containers"
    },
    {
      "$ref": "#/definitions/other"
    }
  ],
  "properties": {
  }
}
